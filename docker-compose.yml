version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: clay_postgres
    environment:
      POSTGRES_USER: clay_user
      POSTGRES_PASSWORD: clay_password
      POSTGRES_DB: clay_clone
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clay_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: clay_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: clay_backend
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://clay_user:clay_password@postgres:5432/clay_clone
      REDIS_URL: redis://redis:6379/0
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      APOLLO_API_KEY: ${APOLLO_API_KEY}
      EMAIL_VALIDATION_API_KEY: ${EMAIL_VALIDATION_API_KEY}
      EMAIL_VALIDATION_PROVIDER: ${EMAIL_VALIDATION_PROVIDER:-hunter}
      ENVIRONMENT: development
      DEBUG: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: clay_celery_worker
    command: celery -A workers.tasks.celery_app worker --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      DATABASE_URL: postgresql://clay_user:clay_password@postgres:5432/clay_clone
      REDIS_URL: redis://redis:6379/0
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      APOLLO_API_KEY: ${APOLLO_API_KEY}
      EMAIL_VALIDATION_API_KEY: ${EMAIL_VALIDATION_API_KEY}
      EMAIL_VALIDATION_PROVIDER: ${EMAIL_VALIDATION_PROVIDER:-hunter}
    depends_on:
      - postgres
      - redis
      - backend

  # Frontend Next.js (optional - can run separately)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: clay_frontend
    command: npm run dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data:

